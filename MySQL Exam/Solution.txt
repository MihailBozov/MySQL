CREATE DATABASE preserves_db;

# -------------------------------------------------------------------------



# 01.Table Design

CREATE TABLE continents(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(40) NOT NULL UNIQUE
);

CREATE TABLE countries(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(40) NOT NULL UNIQUE,
    `country_code` VARCHAR(10) NOT NULL UNIQUE,
    `continent_id` INT NOT NULL
);

CREATE TABLE preserves(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(255) NOT NULL UNIQUE,
    `latitude` DECIMAL(9, 6),
    `longitude` DECIMAL(9, 6),
    `area` INT,
    `type` VARCHAR(20),
    `established_on` DATE
);

CREATE TABLE positions(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(40) NOT NULL UNIQUE,
    `description` TEXT,
    `is_dangerous` BOOLEAN NOT NULL
);

CREATE TABLE workers(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(40) NOT NULL,
    `last_name` VARCHAR(40) NOT NULL,
    `age` INT,
    `personal_number` VARCHAR(20) NOT NULL UNIQUE,
    `salary` DECIMAL(19, 2),
    `is_armed` BOOLEAN NOT NULL,
    `start_date` DATE,
    `preserve_id` INT,
    `position_id` INT
);

CREATE TABLE countries_preserves(
	`country_id` INT,
    `preserve_id` INT
);

ALTER TABLE countries 
ADD CONSTRAINT fk_countries_continents_id 
FOREIGN KEY (`continent_id`) REFERENCES continents(`id`);

ALTER TABLE countries_preserves
ADD CONSTRAINT fk_countries_preserves_countries_id
	FOREIGN KEY (`country_id`) REFERENCES countries(`id`),
ADD CONSTRAINT fk_countries_preserves_preserves_id
	FOREIGN KEY (`preserve_id`) REFERENCES preserves(`id`);

ALTER TABLE workers
ADD CONSTRAINT fk_workers_positions_id
	FOREIGN KEY (`position_id`) REFERENCES positions(`id`),
ADD CONSTRAINT k_workers_preservers_id
	FOREIGN KEY (`preserve_id`) REFERENCES preserves(`id`);

# -------------------------------------------------------------------------



# 02.Insert

INSERT INTO preserves (
						`name`,
                        `latitude`,
                        `longitude`,
                        `area`,
                        `type`,
                        `established_on`
					  )
(
	SELECT 
		CONCAT(`name`, ' ', 'is in South Hemisphere'),
        `latitude`,
        `longitude`,
        `area` * `id`,
        LOWER(`type`),
        `established_on`
    FROM preserves
    WHERE `latitude` < 0
);

# -------------------------------------------------------------------------



# 03.Update

UPDATE workers
SET `salary` = `salary` + 500
WHERE `position_id` IN (5, 8, 11, 13);

# -------------------------------------------------------------------------



# 04.Delete

DELETE FROM preserves
WHERE `established_on` IS NULL;

# -------------------------------------------------------------------------



# 05.Most experienced workers

SELECT 
	CONCAT(first_name, ' ', last_name) AS full_name,
    TIMESTAMPDIFF(DAY, start_date, DATE('2024-01-01')) AS days_of_experience
FROM workers
WHERE TIMESTAMPDIFF(YEAR, start_date, DATE('2024-01-01')) > 5
ORDER BY days_of_experience DESC
LIMIT 10;

# -------------------------------------------------------------------------



# 06.Worker's salary

SELECT 
	w.`id`,
    w.`first_name`,
    w.`last_name`,
    p.`name` AS preserve_name,
    c.`country_code`
FROM workers AS w
JOIN preserves AS p
ON w.preserve_id = p.id
JOIN countries_preserves AS cp
ON p.id = cp.preserve_id
JOIN countries AS c
ON cp.country_id = c.id
WHERE salary > 5000 AND age < 50
ORDER BY country_code ASC;

# -------------------------------------------------------------------------



# 07.Armed workers count

SELECT
	`name`,
    COUNT(is_armed) AS armed_workers
FROM preserves AS p
JOIN workers AS w
ON p.id = w.preserve_id
WHERE is_armed = TRUE
GROUP BY `name`
ORDER BY armed_workers DESC, `name` ASC;

# -------------------------------------------------------------------------



# 08.Oldest preserves

SELECT 
	p.`name`,
    c.country_code,
    YEAR(p.established_on) AS founded_in
FROM preserves AS p
JOIN countries_preserves AS cp
ON p.id = cp.preserve_id
JOIN countries AS c
ON cp.country_id = c.id
WHERE MONTH(p.established_on) = 5
ORDER BY p.established_on ASC
LIMIT 5;

# -------------------------------------------------------------------------



# 09.Preserve categories

SELECT 
	id,
    `name`,
    CASE 
		WHEN area <= 100 THEN 'very small'
        WHEN area <= 1000 THEN 'small'
        WHEN area <= 10000 THEN 'medium'
        WHEN area <= 50000 THEN 'large'
        When area > 50000 THEN 'very large'
	END AS category
	FROM preserves
    ORDER BY area DESC;

# -------------------------------------------------------------------------



# 10.Extract average salary

CREATE FUNCTION udf_average_salary_by_position_name (name_input VARCHAR(40)) 
    RETURNS DECIMAL(19,2)
    NOT DETERMINISTIC
    BEGIN
		RETURN (
			SELECT
				AVG(w.salary) AS position_average_salary
			FROM positions AS p
			JOIN workers AS w
			ON p.id = w.position_id
			WHERE p.`name` = name_input
			GROUP BY p.`name`
        );
    END

# -------------------------------------------------------------------------



# 11.Improving the standard of living

CREATE PROCEDURE udp_increase_salaries_by_country (country_name VARCHAR(40))
BEGIN
    UPDATE workers AS w
    JOIN preserves AS p 
    	ON w.preserve_id = p.id
    JOIN countries_preserves AS cp 
    	ON p.id = cp.preserve_id
    JOIN countries AS c 
    	ON cp.country_id = c.id
    SET w.salary = w.salary * 1.05
    WHERE c.name = country_name;
END

# -------------------------------------------------------------------------





